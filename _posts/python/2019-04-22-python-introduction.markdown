---
title: 1. Введение в Python
category: python
tags: [h1, group0.419]
author: pirate-ship-learning
---
 - Введение в язык Python
 - Установка Python в операционной системе Windows
 - Установка Python в операционной системе Linux
 - Знакомство с интерпретатором
 - Ваша первая программа
 - Работа с переменными
 - Получение введенных пользователем данных
 - Исправление ошибок

Перечислим некоторые из важнейших отличительных особенностей
языка Python, которые делают его привлекательным для начинающих
программистов.
 - Python бесплатен — это свободно распространяемое программное
обеспечение с открытым исходным кодом.
 - Python легок в изучении — он имеет простой синтаксис.
 - Python позволяет создавать легко читаемый код — он не перегружен знаками препинания.
 - Python легок в обслуживании — имеет модульную структуру.
 - Python располагает богатым «арсеналом» — он предлагает большую стандартную библиотеку, которая легко интегрируется в ваши
программы.
 - Python портируемый — его можно запустить на обширном множестве различных платформ, и везде он будет иметь один и тот же
интерфейс.
 - Python интерпретируемый — компиляция не требуется.
 - Python является высокоуровневым языком — он имеет статическое распределение памяти.
 - Python расширяемый — позволяет добавлять низкоуровневые
модули.
 - Python универсален — поддерживает как процедурный, так
и объект но ориентированный методы программирования.
 - Python гибок в использовании — с его помощью можно создавать
консольные программы, приложения графического интерфейса,
а также сценарии для взаимодействия внешних программ с вебсерверами.

Все последующие уроки будут основываться на книге
<a>Майкл МакГрат - Программирование для начинающих</a>. 

<div class="note info">
  <p>
	  	Название языку Python было
	дано в честь популярного
	британского комедийного
	шоу «Летающий цирк Монти
	Пайтона» (Monty Python's
	Flying Circus) — вы можете
	найти упоминание об этом
	в документации по языку

  </p>
</div>

Для установки Python можно воспрользоваться [инструкцией](/docs/python/installation/). 

Мы будем рассматривать и использовать примеры только для Python версии 3. 

## IDLE (Python GUI)

Integrated DeveLopment Environment - интегрированная среда разработки.

Отдельно останавливаться на среде запуска IDLE я не буду, т.к. не нашел отличий от интерактивного режима интерпретатора в консоле, который запускается командой ```python``` из командной строки.

Приглашение выглядит примерно так:
```py
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>

```

Мы будем использовать IDLE для запуска примеров из уроков. А еще им можно пользоваться как калькулятором.

<div class="note info">
  <p>Компьютерные очки - это развод от маркетологов. Сделайте яркость монитора меньше и используйте темные темы, чтобы не уставали глаза. <a href='https://www.johnnyavakian.com/idle-dracula-or-idle-obsidian/'>Скачать DARK тему для IDLE</a>.</p>
</div>

## Ваша первая программа

```py

print("Hello world")
>>>
Hello world
```

Стоит обратить внимание, что в версии 3 нельзя использовать команду ```print``` без скобочек. 

```py
# Интерпретатор Python 3 не хочет выполнять код Python 2
# хоть и понимает его. Типичная проблемма отцов и детей. 
>>> print 'Hello world'
SyntaxError: Missing parentheses in call to 'print'. 
Did you mean print('Hello world')?
```

## Переменные

Переменная это некоторый контейнер в памяти компьютера, к которым можно обращаться по имени переменной.

```py
# Переменая содержит данные 
>>> a = 'Hello world'
>>> print(a)
Hello world
```
Названия переменных не могут быть <a>ключевыми словами языка</a>, чтобы не было конфликтов.

Переменная может менять свое значение в процессе выполнения программы.
```py
>>> a = 'Hello world'
>>> a = 'Bye world'
>>> print(a)
Bye world
```

Присваивание переменных
```py
# Несколько переменных можно определять одним значение
a = b = c = 8

# или разными
a, b, c = 1, 2, 3
```

Переменные в Python динамически типизируются. 
```py
# Переменная a - число
a = 8

# А потом строка
a = 'Stop the world'
```

Пользовательский ввод и значение переменных
```py
# Инициализируем переменную значением, введенным пользователем
>>> user = input( 'How to escape from computer? : ' )
How to escape from computer? : No way
>>> user
'No way'
```

<div class="note warning">
  <p>Функции input() небезопасна в Python 2, используйте raw_input(). </p>
  <p>Python 3 функции raw_input() не существует, можно расслабиться.</p>
</div>

Функция ```print``` может принимать несколько значений

```py
>>> lang = 'Python'
# Выводим строку и значение переменной
>>> print( lang , 'is' , 'not', 'snake' , sep = ' * ' , end = '!\n' )
Python * is * not * snake!
```

## Исправление ошибок

Бывает два вида ошибок
- Ошибка исполнения - происходит во время исполнения программы. 

```
>>> print("I'm too lazy to close brackets
  File "<stdin>", line 1
    print("I'm too lazy to close brackets
                                        ^
SyntaxError: EOL while scanning string literal
>>> print("Ok, I'll fix it")
Ok, I'll fix it

```


- Логическая ошибка (смысловая) — происходит, когда программа ведет себя не так, как было задумано.

```py
>>> name = 29
>>> age = 'Lara Croft'
>>> print(name, 'is a girl. Age of', age)
29 is a girl. Age of Lara Croft
# wtf? 
```

Ошибки в программах часто называются багами (от англ. bug — жук), а процесс их отслеживания называется отладкой (англ. debugging, одно из значений — удаление насекомых с растений)

## Задания

1. Познакомьтесь человеком узнав его имя. Поблагодарите за знакомство и назовите по имени. Ему будет приятно и он будет вам доверять.

2. Выведите на экран все символы английского алфавита. И русского тоже. 

3. Напишите калькулятор считающий квадрат получаемого от пользователя большого числа. Покажите этим пользователю, что программа умнее. 

## Без компьютера 

Объясните вывод программы 

```py
a = b = 29
a = b - a
b = c
print(b)
```
&nbsp;

```py
a = b = 29
a = b - a
print(b)
```
&nbsp;
```py
a = b = 29
a = b - 30
print(b)
```
&nbsp;

```py
a, b, c = '1', 2, 'Hello'
d = a + b + c
print(d)
```
&nbsp;

```py
a, b, c = 'I'm', 'the', 'BOSS'
print(a, b, c)
```
Строки должны заканчиваться так же как и начались. 

```py
a, b, c = "Set", 'me', '''free'''
d = "Set" + 'me' + '''free'''
print(a, b, c)
print(d)
```

Немного простейшей математики

```py
a, b  = 22, 11
c = a
d = c
f = b
k = a / d
m = f / a
print(k * m)
```

```py
a, b  = 22, 11
c = a
d = c
f = b
k = a / d
m = f / a
print(k * m)
```